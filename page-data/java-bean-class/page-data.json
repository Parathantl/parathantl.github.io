{"componentChunkName":"component---src-templates-blog-post-js","path":"/java-bean-class/","result":{"data":{"site":{"siteMetadata":{"title":"Parathan's blog"}},"markdownRemark":{"id":"d06600b6-91eb-55fe-bac8-39daf7fa0c01","excerpt":"Java Bean class is a Simple class that encapsulates many object in to a single object. Usually Bean contains the following conventions implements Serialize…","html":"<p>Java Bean class is a Simple class that encapsulates many object in to a single object. Usually Bean contains the following conventions</p>\n<ol>\n<li><strong>implements Serialize interface</strong></li>\n</ol>\n<p>Serialization is the process of changing objects into a byte stream. The byte stream is the data type which is used to store in a physical file, memory or database. So, serialization process is much important according to programming.</p>\n<p>Usage of Serialization are</p>\n<ul>\n<li>save/persist state of an object.</li>\n<li>To travel an object across a network.</li>\n</ul>\n<p><strong>2. should have a public no-arg constructor.</strong></p>\n<p><strong>3.All properties in java bean must be private with public getters and setter methods.</strong></p>\n<p>Shall We have a Sample code:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// Java Program of JavaBean class\n\npublic class Book implements java.io.Serializable {\n\tprivate int id;\n\tprivate String book_name;\n  \n\t//Public Constructor with No Arguments\n\tpublic Book() { } //Following are getter &amp; setter methods\n\t\n\tpublic void setId(int id) {\n\t\tthis.id = id;\n\t}\n\n\tpublic int getId() {\n\t\treturn** id;\n\t}\n\n\tpublic void setBook_name( String book_name){\n\t\tthis.book_name= book_name;\n\t}\n\n\tpublic String getBook_name(){\n\t\treturn book_name;\n\t}\n\n}</code></pre></div>\n<p>Some syntax used for Setter method</p>\n<ul>\n<li>It is in public</li>\n<li>return type should be void : As it sets the value only</li>\n<li>It is written with “set” prefix and the name Eg: <strong>setBook_name</strong></li>\n<li>It should take some arguments like without no arguments is invalid</li>\n</ul>\n<p>Some syntax used for Getter methods</p>\n<ul>\n<li>It is in public</li>\n<li>return type should be the data type of the respective requirement data</li>\n<li>Method be prefixed with “get” Eg: <strong>getBook_name</strong></li>\n<li>should not take any arguments</li>\n</ul>\n<p>Here, you may get some doubt of POJO class &#x26; Bean Class are same.</p>\n<p>Am I right..? If you refer the database entity code class, that is called POJO class.</p>\n<p>That means, all POJO class are Bean class but not Bean class are POJO. Just keep in mind.</p>\n<p>This is a answer found on StackOverFlow :</p>\n<blockquote>\n<p>A Java Bean follows certain conventions. Getter/setter naming, having a public default constructor, being serializeable etc.</p>\n<p>A POJO (plain-old-Java-object) isn’t rigorously defined. It’s a Java object that doesn’t have a requirement to implement a particular interface or derive from a particular base class, or make use of particular annotations in order to be compatible with a given framework, and can be any arbitrary (often relatively simple) Java object.</p>\n</blockquote>\n<p>This may be helpful to you.</p>\n<p>Thank you.</p>\n<p>Happy Coding Forks….!!</p>","frontmatter":{"title":"Java Bean Class","date":"October 13, 2018","description":null,"tags":["Java"]}}},"pageContext":{"slug":"/java-bean-class/","previous":{"fields":{"slug":"/send-sms-in-nodejs-using-nexmo/"},"frontmatter":{"title":"Send SMS in NodeJS using Nexmo"}},"next":{"fields":{"slug":"/getting-started-with-redux/"},"frontmatter":{"title":"Getting Started with Redux — Beginners"}}}},"staticQueryHashes":["2841359383","2944715102"]}